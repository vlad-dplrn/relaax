# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bridge.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='bridge.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0c\x62ridge.proto\"\r\n\x0bNullMessage\"\x17\n\x05NIter\x12\x0e\n\x06n_iter\x18\x01 \x01(\x07\"\x11\n\x04Step\x12\t\n\x01g\x18\x01 \x01(\x06\"5\n\x07NdArray\x12\r\n\x05\x64type\x18\x01 \x01(\t\x12\r\n\x05shape\x18\x02 \x03(\x05\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"G\n\x0b\x46ilterState\x12\t\n\x01n\x18\x01 \x01(\x06\x12\x16\n\x04mean\x18\x02 \x01(\x0b\x32\x08.NdArray\x12\x15\n\x03std\x18\x03 \x01(\x0b\x32\x08.NdArray\"\xbd\x01\n\nExperience\x12\x0e\n\x06n_iter\x18\x01 \x01(\x07\x12\x1d\n\x0bobservation\x18\x02 \x03(\x0b\x32\x08.NdArray\x12\x18\n\x06\x61\x63tion\x18\x03 \x03(\x0b\x32\x08.NdArray\x12\x16\n\x04prob\x18\x04 \x03(\x0b\x32\x08.NdArray\x12\x0e\n\x06reward\x18\x05 \x03(\x01\x12\x12\n\nterminated\x18\x06 \x01(\x08\x12\x0e\n\x06length\x18\x07 \x01(\x07\x12\x1a\n\x04\x64iff\x18\x08 \x01(\x0b\x32\x0c.FilterState\"[\n\x0cScalarMetric\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\t\n\x01y\x18\x02 \x01(\x01\x12\x1c\n\x01x\x18\x03 \x01(\x0b\x32\x11.ScalarMetric.Arg\x1a\x14\n\x03\x41rg\x12\r\n\x05value\x18\x01 \x01(\x01\x32\x9d\x02\n\x0fParameterServer\x12#\n\nGetGlobalT\x12\x0c.NullMessage\x1a\x05.Step\"\x00\x12.\n\x0eGetFilterState\x12\x0c.NullMessage\x1a\x0c.FilterState\"\x00\x12*\n\x10WaitForIteration\x12\x0c.NullMessage\x1a\x06.NIter\"\x00\x12-\n\x0eSendExperience\x12\x0b.Experience\x1a\x0c.NullMessage\"\x00\x12&\n\x0eReceiveWeights\x12\x06.NIter\x1a\x08.NdArray\"\x00\x30\x01\x12\x32\n\x11StoreScalarMetric\x12\r.ScalarMetric\x1a\x0c.NullMessage\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_NULLMESSAGE = _descriptor.Descriptor(
  name='NullMessage',
  full_name='NullMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=16,
  serialized_end=29,
)


_NITER = _descriptor.Descriptor(
  name='NIter',
  full_name='NIter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n_iter', full_name='NIter.n_iter', index=0,
      number=1, type=7, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=54,
)


_STEP = _descriptor.Descriptor(
  name='Step',
  full_name='Step',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='g', full_name='Step.g', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=56,
  serialized_end=73,
)


_NDARRAY = _descriptor.Descriptor(
  name='NdArray',
  full_name='NdArray',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dtype', full_name='NdArray.dtype', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='shape', full_name='NdArray.shape', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='NdArray.data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=75,
  serialized_end=128,
)


_FILTERSTATE = _descriptor.Descriptor(
  name='FilterState',
  full_name='FilterState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n', full_name='FilterState.n', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mean', full_name='FilterState.mean', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='std', full_name='FilterState.std', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=130,
  serialized_end=201,
)


_EXPERIENCE = _descriptor.Descriptor(
  name='Experience',
  full_name='Experience',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n_iter', full_name='Experience.n_iter', index=0,
      number=1, type=7, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='observation', full_name='Experience.observation', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action', full_name='Experience.action', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prob', full_name='Experience.prob', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reward', full_name='Experience.reward', index=4,
      number=5, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='terminated', full_name='Experience.terminated', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='length', full_name='Experience.length', index=6,
      number=7, type=7, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='diff', full_name='Experience.diff', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=204,
  serialized_end=393,
)


_SCALARMETRIC_ARG = _descriptor.Descriptor(
  name='Arg',
  full_name='ScalarMetric.Arg',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='ScalarMetric.Arg.value', index=0,
      number=1, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=466,
  serialized_end=486,
)

_SCALARMETRIC = _descriptor.Descriptor(
  name='ScalarMetric',
  full_name='ScalarMetric',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ScalarMetric.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y', full_name='ScalarMetric.y', index=1,
      number=2, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='x', full_name='ScalarMetric.x', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SCALARMETRIC_ARG, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=395,
  serialized_end=486,
)

_FILTERSTATE.fields_by_name['mean'].message_type = _NDARRAY
_FILTERSTATE.fields_by_name['std'].message_type = _NDARRAY
_EXPERIENCE.fields_by_name['observation'].message_type = _NDARRAY
_EXPERIENCE.fields_by_name['action'].message_type = _NDARRAY
_EXPERIENCE.fields_by_name['prob'].message_type = _NDARRAY
_EXPERIENCE.fields_by_name['diff'].message_type = _FILTERSTATE
_SCALARMETRIC_ARG.containing_type = _SCALARMETRIC
_SCALARMETRIC.fields_by_name['x'].message_type = _SCALARMETRIC_ARG
DESCRIPTOR.message_types_by_name['NullMessage'] = _NULLMESSAGE
DESCRIPTOR.message_types_by_name['NIter'] = _NITER
DESCRIPTOR.message_types_by_name['Step'] = _STEP
DESCRIPTOR.message_types_by_name['NdArray'] = _NDARRAY
DESCRIPTOR.message_types_by_name['FilterState'] = _FILTERSTATE
DESCRIPTOR.message_types_by_name['Experience'] = _EXPERIENCE
DESCRIPTOR.message_types_by_name['ScalarMetric'] = _SCALARMETRIC

NullMessage = _reflection.GeneratedProtocolMessageType('NullMessage', (_message.Message,), dict(
  DESCRIPTOR = _NULLMESSAGE,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:NullMessage)
  ))
_sym_db.RegisterMessage(NullMessage)

NIter = _reflection.GeneratedProtocolMessageType('NIter', (_message.Message,), dict(
  DESCRIPTOR = _NITER,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:NIter)
  ))
_sym_db.RegisterMessage(NIter)

Step = _reflection.GeneratedProtocolMessageType('Step', (_message.Message,), dict(
  DESCRIPTOR = _STEP,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:Step)
  ))
_sym_db.RegisterMessage(Step)

NdArray = _reflection.GeneratedProtocolMessageType('NdArray', (_message.Message,), dict(
  DESCRIPTOR = _NDARRAY,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:NdArray)
  ))
_sym_db.RegisterMessage(NdArray)

FilterState = _reflection.GeneratedProtocolMessageType('FilterState', (_message.Message,), dict(
  DESCRIPTOR = _FILTERSTATE,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:FilterState)
  ))
_sym_db.RegisterMessage(FilterState)

Experience = _reflection.GeneratedProtocolMessageType('Experience', (_message.Message,), dict(
  DESCRIPTOR = _EXPERIENCE,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:Experience)
  ))
_sym_db.RegisterMessage(Experience)

ScalarMetric = _reflection.GeneratedProtocolMessageType('ScalarMetric', (_message.Message,), dict(

  Arg = _reflection.GeneratedProtocolMessageType('Arg', (_message.Message,), dict(
    DESCRIPTOR = _SCALARMETRIC_ARG,
    __module__ = 'bridge_pb2'
    # @@protoc_insertion_point(class_scope:ScalarMetric.Arg)
    ))
  ,
  DESCRIPTOR = _SCALARMETRIC,
  __module__ = 'bridge_pb2'
  # @@protoc_insertion_point(class_scope:ScalarMetric)
  ))
_sym_db.RegisterMessage(ScalarMetric)
_sym_db.RegisterMessage(ScalarMetric.Arg)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class ParameterServerStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetGlobalT = channel.unary_unary(
          '/ParameterServer/GetGlobalT',
          request_serializer=NullMessage.SerializeToString,
          response_deserializer=Step.FromString,
          )
      self.GetFilterState = channel.unary_unary(
          '/ParameterServer/GetFilterState',
          request_serializer=NullMessage.SerializeToString,
          response_deserializer=FilterState.FromString,
          )
      self.WaitForIteration = channel.unary_unary(
          '/ParameterServer/WaitForIteration',
          request_serializer=NullMessage.SerializeToString,
          response_deserializer=NIter.FromString,
          )
      self.SendExperience = channel.unary_unary(
          '/ParameterServer/SendExperience',
          request_serializer=Experience.SerializeToString,
          response_deserializer=NullMessage.FromString,
          )
      self.ReceiveWeights = channel.unary_stream(
          '/ParameterServer/ReceiveWeights',
          request_serializer=NIter.SerializeToString,
          response_deserializer=NdArray.FromString,
          )
      self.StoreScalarMetric = channel.unary_unary(
          '/ParameterServer/StoreScalarMetric',
          request_serializer=ScalarMetric.SerializeToString,
          response_deserializer=NullMessage.FromString,
          )


  class ParameterServerServicer(object):

    def GetGlobalT(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetFilterState(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def WaitForIteration(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SendExperience(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ReceiveWeights(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StoreScalarMetric(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ParameterServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetGlobalT': grpc.unary_unary_rpc_method_handler(
            servicer.GetGlobalT,
            request_deserializer=NullMessage.FromString,
            response_serializer=Step.SerializeToString,
        ),
        'GetFilterState': grpc.unary_unary_rpc_method_handler(
            servicer.GetFilterState,
            request_deserializer=NullMessage.FromString,
            response_serializer=FilterState.SerializeToString,
        ),
        'WaitForIteration': grpc.unary_unary_rpc_method_handler(
            servicer.WaitForIteration,
            request_deserializer=NullMessage.FromString,
            response_serializer=NIter.SerializeToString,
        ),
        'SendExperience': grpc.unary_unary_rpc_method_handler(
            servicer.SendExperience,
            request_deserializer=Experience.FromString,
            response_serializer=NullMessage.SerializeToString,
        ),
        'ReceiveWeights': grpc.unary_stream_rpc_method_handler(
            servicer.ReceiveWeights,
            request_deserializer=NIter.FromString,
            response_serializer=NdArray.SerializeToString,
        ),
        'StoreScalarMetric': grpc.unary_unary_rpc_method_handler(
            servicer.StoreScalarMetric,
            request_deserializer=ScalarMetric.FromString,
            response_serializer=NullMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ParameterServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaParameterServerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetGlobalT(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetFilterState(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def WaitForIteration(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SendExperience(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ReceiveWeights(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StoreScalarMetric(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaParameterServerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetGlobalT(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetGlobalT.future = None
    def GetFilterState(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetFilterState.future = None
    def WaitForIteration(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    WaitForIteration.future = None
    def SendExperience(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SendExperience.future = None
    def ReceiveWeights(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def StoreScalarMetric(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    StoreScalarMetric.future = None


  def beta_create_ParameterServer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('ParameterServer', 'GetFilterState'): NullMessage.FromString,
      ('ParameterServer', 'GetGlobalT'): NullMessage.FromString,
      ('ParameterServer', 'ReceiveWeights'): NIter.FromString,
      ('ParameterServer', 'SendExperience'): Experience.FromString,
      ('ParameterServer', 'StoreScalarMetric'): ScalarMetric.FromString,
      ('ParameterServer', 'WaitForIteration'): NullMessage.FromString,
    }
    response_serializers = {
      ('ParameterServer', 'GetFilterState'): FilterState.SerializeToString,
      ('ParameterServer', 'GetGlobalT'): Step.SerializeToString,
      ('ParameterServer', 'ReceiveWeights'): NdArray.SerializeToString,
      ('ParameterServer', 'SendExperience'): NullMessage.SerializeToString,
      ('ParameterServer', 'StoreScalarMetric'): NullMessage.SerializeToString,
      ('ParameterServer', 'WaitForIteration'): NIter.SerializeToString,
    }
    method_implementations = {
      ('ParameterServer', 'GetFilterState'): face_utilities.unary_unary_inline(servicer.GetFilterState),
      ('ParameterServer', 'GetGlobalT'): face_utilities.unary_unary_inline(servicer.GetGlobalT),
      ('ParameterServer', 'ReceiveWeights'): face_utilities.unary_stream_inline(servicer.ReceiveWeights),
      ('ParameterServer', 'SendExperience'): face_utilities.unary_unary_inline(servicer.SendExperience),
      ('ParameterServer', 'StoreScalarMetric'): face_utilities.unary_unary_inline(servicer.StoreScalarMetric),
      ('ParameterServer', 'WaitForIteration'): face_utilities.unary_unary_inline(servicer.WaitForIteration),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ParameterServer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('ParameterServer', 'GetFilterState'): NullMessage.SerializeToString,
      ('ParameterServer', 'GetGlobalT'): NullMessage.SerializeToString,
      ('ParameterServer', 'ReceiveWeights'): NIter.SerializeToString,
      ('ParameterServer', 'SendExperience'): Experience.SerializeToString,
      ('ParameterServer', 'StoreScalarMetric'): ScalarMetric.SerializeToString,
      ('ParameterServer', 'WaitForIteration'): NullMessage.SerializeToString,
    }
    response_deserializers = {
      ('ParameterServer', 'GetFilterState'): FilterState.FromString,
      ('ParameterServer', 'GetGlobalT'): Step.FromString,
      ('ParameterServer', 'ReceiveWeights'): NdArray.FromString,
      ('ParameterServer', 'SendExperience'): NullMessage.FromString,
      ('ParameterServer', 'StoreScalarMetric'): NullMessage.FromString,
      ('ParameterServer', 'WaitForIteration'): NIter.FromString,
    }
    cardinalities = {
      'GetFilterState': cardinality.Cardinality.UNARY_UNARY,
      'GetGlobalT': cardinality.Cardinality.UNARY_UNARY,
      'ReceiveWeights': cardinality.Cardinality.UNARY_STREAM,
      'SendExperience': cardinality.Cardinality.UNARY_UNARY,
      'StoreScalarMetric': cardinality.Cardinality.UNARY_UNARY,
      'WaitForIteration': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'ParameterServer', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
